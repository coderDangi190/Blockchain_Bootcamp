			#synchronous code with a blocking operation
function runloop(){
	for(let i=0; i<1e10; i++){
	console.log('loop finished');
}
console.log('First statement');
runloop();
console.log('Second Statement');

			#Asynchronous code
console.log("first Statement");
setTimeout(()=>{
	console.log("Second Statement")
	}, 2000);
console.log("Second Statement");



			#Promises
const promisObj = new Promise((resolve, reject)=>{
	setTimeout(()=>{
		const success =false;
		if(success=== true){
			resolve("Data Featch Successfully.");
		}
		else{
			reject("Failed to featch Data.");
		}
	},3000);
});

console.log('Request Start');

async function getStatut(){
	try{
	const result = await promiseObj;
	console.log(result);
	}
	catch(error){
	console.log(error);
	}
}
getStatus();
/*
promiseObj.then((result)=>{
console.log(result)
})
.catch((error)=>{
console.log(error)
})
*/

console.log('Request Ended');


		#Featching the data from a public API
//fetch('https://api.coincap.io/v2/assets')
async function feactobj(){
	try{
		const response = await fetch('https://api.coincap.io/v2/assets');
		const data = await response.json();
		console.log(data);
	}
	catch(error){
		console.log(error);
	}
}
fetchobj();